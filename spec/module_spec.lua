describe('module', function()
  local module, path
  setup(function()
    require "compat53"
    module = require "meta.module"
    path = require "meta.path"
  end)
  it("meta", function()
    assert.is_table(module)
    local m = module('meta')
    assert.is_table(m)
    assert.equal('meta', m.origin)
    assert.equal('meta', m.name)
    assert.equal('meta/init.lua', m.file)
    assert.equal('meta', m.dir)
  end)
  it("meta.loader", function()
    local m = module('meta.loader')
    assert.is_table(m)
    assert.equal('meta.loader', m.origin)
    assert.equal('meta/loader', m.name)
    assert.equal('meta/loader.lua', m.file)
    assert.equal(nil, m.path)
  end)
  it("testdata.loader.noinit", function()
    local m = module('testdata.loader.noinit')
    assert.is_table(m)
    assert.equal('testdata.loader.noinit', m.origin)
    assert.equal('testdata/loader/noinit', m.name)
    assert.equal(nil, m.file)
    assert.equal('testdata/loader/noinit', m.path)
  end)
  it("module.noneexistent", function()
    assert.is_nil(module('testdata/noneexistent').path)
  end)
  it("path()", function()
    assert.equal('meta', module('meta').path)
    assert.is_nil(module('meta.loader').path)
    assert.is_nil(module('testdata/init1/file').path)
    assert.equal('testdata/init1/dirinit', module('testdata/init1/dirinit').path)
    assert.equal('testdata/init1/filedir', module('testdata/init1/filedir').path)
    assert.equal('testdata/init1/all', module('testdata/init1/all').path)

    assert.equal('testdata/init1/dir', module('testdata/init1/dir').path)
    assert.equal('testdata/init1', module('testdata/init1').path)
    assert.equal('testdata', module('testdata').path)

    assert.equal('test2/init2', path('init2'))
    assert.equal('test2/init2/dir', module('init2.dir').path)
    assert.equal('test2/init2/dirinit', module('init2.dirinit').path)
    assert.equal('testdata', path('testdata'))
    assert.equal('testdata/init1', path('testdata.init1'))
    assert.equal('testdata/init1/dir', path('testdata.init1.dir'))

    assert.equal('testdata/init1/dir', module('testdata.init1.dir').path)
    assert.equal('test2/init2/dirinit', path('init2.dirinit'))
    assert.equal('test2/init2/filedir', path('init2.filedir'))
    assert.equal('test2/init2/all', path('init2.all'))
  end)

  it(".origin", function()
    assert.equal('meta', module('meta').origin)
    assert.equal('meta.loader', module('meta.loader').origin)

    assert.equal('testdata.init1.file', module('testdata.init1.file').origin)
    assert.equal('testdata.init1.dir', module('testdata.init1.dir').origin)
    assert.equal('testdata.init1.dirinit', module('testdata.init1.dirinit').origin)
    assert.equal('testdata.init1.filedir', module('testdata.init1.filedir').origin)
    assert.equal('testdata.init1.all', module('testdata.init1.all').origin)

    assert.equal('init2', module('init2').origin)
    assert.equal('init2.file', module('init2.file').origin)
    assert.equal('init2.dir', module('init2.dir').origin)
    assert.equal('init2.dirinit', module('init2.dirinit').origin)
    assert.equal('init2.filedir', module('init2.filedir').origin)
    assert.equal('init2.all', module('init2.all').origin)
  end)
  it(".name", function()
    assert.equal('meta', module('meta').name)
    assert.equal('meta/loader', module('meta.loader').name)
    assert.equal('testdata/init1/file', module('testdata.init1.file').name)
    assert.equal('testdata/init1/dir', module('testdata.init1.dir').name)
    assert.equal('testdata/init1/dirinit', module('testdata.init1.dirinit').name)
    assert.equal('testdata/init1/filedir', module('testdata.init1.filedir').name)
    assert.equal('testdata/init1/all', module('testdata.init1.all').name)

    assert.equal('init2', module('init2').name)
    assert.equal('init2/file', module('init2.file').name)
    assert.equal('init2/dir', module('init2.dir').name)
    assert.equal('init2/dirinit', module('init2.dirinit').name)
    assert.equal('init2/filedir', module('init2.filedir').name)
    assert.equal('init2/all', module('init2.all').name)
  end)
  it(".file", function()
    assert.equal('meta/init.lua', module('meta').file)
    assert.equal('meta/loader.lua', module('meta.loader').file)
    assert.equal('testdata/init1/file.lua', module('testdata/init1/file').file)
    assert.equal(nil, module('testdata/init1/dir').file)
    assert.equal('testdata/init1/dirinit/init.lua', module('testdata/init1/dirinit').file)
    assert.equal('testdata/init1/filedir.lua', module('testdata/init1/filedir').file)
    assert.equal('testdata/init1/all.lua', module('testdata/init1/all').file)

    assert.equal('test2/init2/init.lua', module('init2').file)
    assert.equal('test2/init2/file.lua', module('init2.file').file)
    assert.is_nil(module('init2.dir').file)
    assert.equal('test2/init2/dirinit/init.lua', module('init2.dirinit').file)
    assert.equal('test2/init2/filedir.lua', module('init2.filedir').file)
    assert.equal('test2/init2/all.lua', module('init2.all').file)
  end)
  it(".path", function()
    assert.equal('meta', module('meta').path)
    assert.is_nil(module('meta.loader').path)
    assert.is_nil(module('testdata/init1/file').path)
    assert.equal('testdata/init1/dirinit', module('testdata/init1/dirinit').path)
    assert.equal('testdata/init1/filedir', module('testdata/init1/filedir').path)
    assert.equal('testdata/init1/all', module('testdata/init1/all').path)

    assert.equal('testdata/init1/dir', module('testdata/init1/dir').path)
    assert.equal('testdata/init1', module('testdata/init1').path)
    assert.equal('testdata', module('testdata').path)

    assert.equal('test2/init2', module('init2').path)
    assert.is_nil((module('init2.path') or {}).path)
    assert.equal('test2/init2/dir', module('init2.dir').path)
    assert.equal('test2/init2/dirinit', module('init2.dirinit').path)
    assert.equal('test2/init2/filedir', module('init2.filedir').path)
    assert.equal('test2/init2/all', module('init2.all').path)
  end)
  it(".dir", function()
    assert.equal('meta', module('meta').dir)
    assert.is_nil(module('meta.loader').dir)
    assert.is_nil(module('testdata/init1/file').dir)
    assert.equal('testdata/init1/dir', module('testdata/init1/dir').dir)
    assert.equal('testdata/init1/dirinit', module('testdata/init1/dirinit').dir)
    assert.equal('testdata/init1/filedir', module('testdata/init1/filedir').dir)
    assert.equal('testdata/init1/all', module('testdata/init1/all').dir)

    assert.equal('test2/init2', module('init2').dir)
    assert.equal('test2/init2/dir', module('init2.dir').dir)
    assert.equal('test2/init2/dir', module('init2/dir').dir)
    assert.equal('test2/init2/dirinit', (module('init2.dirinit') or {}).dir)
    assert.equal('test2/init2/filedir', module('init2.filedir').dir)
    assert.equal('test2/init2/all', module('init2.all').dir)
  end)
  it(".basename", function()
    assert.equal('meta', module('meta').basename)
    assert.equal('loader', module('meta.loader').basename)
    assert.equal('file', module('testdata/init1/file').basename)
    assert.equal('dir', module('testdata/init1/dir').basename)
    assert.equal('dirinit', module('testdata/init1/dirinit').basename)
    assert.equal('filedir', module('testdata/init1/filedir').basename)
    assert.equal('all', module('testdata/init1/all').basename)

    assert.equal('init2', module('init2').basename)
    assert.equal('file', module('init2.file').basename)
    assert.equal('dir', module('init2.dir').basename)
    assert.equal('dirinit', module('init2.dirinit').basename)
    assert.equal('filedir', module('init2.filedir').basename)
    assert.equal('all', module('init2.all').basename)
  end)
  it(".basedir", function()
    assert.is_nil(module('meta').basedir)
    assert.equal('meta', module('meta.loader').basedir)
    assert.equal('testdata/init1', module('testdata/init1/file').basedir)
    assert.equal('testdata/init1', module('testdata/init1/dir').basedir)
    assert.equal('testdata/init1', module('testdata/init1/dirinit').basedir)
    assert.equal('testdata/init1', module('testdata/init1/filedir').basedir)
    assert.equal('testdata/init1', module('testdata/init1/all').basedir)
    assert.equal('testdata', module('testdata/init1').basedir)
    assert.is_nil(module('testdata').basedir)

    assert.is_nil(module('init2').basedir)
    assert.equal('init2', module('init2.file').basedir)
    assert.equal('init2', module('init2/dir').basedir)
    assert.equal('init2', module('init2.dirinit').basedir)
    assert.equal('init2', module('init2.filedir').basedir)
    assert.equal('init2', module('init2.all').basedir)
  end)
  it(".isroot", function()
    assert.is_true(module('meta').isroot)
    assert.is_false(module('meta.loader').isroot)
    assert.is_false(module('testdata/init1/file').isroot)
    assert.is_false(module('testdata/init1/dir').isroot)
    assert.is_false(module('testdata/init1/dirinit').isroot)
    assert.is_false(module('testdata/init1/filedir').isroot)
    assert.is_false(module('testdata/init1/all').isroot)

    assert.is_true(module('init2').isroot)
    assert.is_false(module('init2.file').isroot)
    assert.is_false(module('init2.dir').isroot)
    assert.is_false(module('init2.dirinit').isroot)
    assert.is_false(module('init2.filedir').isroot)
    assert.is_false(module('init2.all').isroot)
  end)
  it(".parent", function()
    assert.same(module('meta'), module('meta.loader').parent)
    assert.same(module('meta/loader').name, module('meta'):sub('loader').name)

    assert.equal(module('meta'), module('meta.loader').parent)
    assert.equal(module('meta/loader').name, module('meta'):sub('loader').name)
  end)
  it(".load ok and test cache", function()
    local m = module('testdata.loader.ok.message')
    assert.truthy(m.exists)
    assert.is_table(m.load)
    assert.is_nil(m.error)
    assert.equal('ok', m.load.data)
    assert.truthy(package.loaded[m.name] or package.loaded[m.origin] or package.loaded[m.path])
  end)
  it(".load failed", function()
    local m = module('testdata.loader.failed')
    assert.truthy(m.exists)
    assert.is_nil(m.load)
    assert.is_string(m.error)
  end)
end)
