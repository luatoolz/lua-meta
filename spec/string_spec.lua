describe('string', function()
  setup(function() require 'meta' end)
  it("replace", function()
    assert.is_nil(string.replace(nil, nil, nil))
    assert.equal('', string.replace('', nil, nil))
    assert.truthy(string.replace('one:two:three', "%:", "/") == "one/two/three")
  end)
  it("startswith", function()
    assert.truthy(string.startswith('test', 'te'))
    assert.truthy(string.startswith(" ", " "))
    assert.truthy(string.startswith("", ""))
    assert.truthy(not string.startswith('test', 'fake'))
    assert.truthy(not string.startswith('test', 'o'))
  end)
  it("endswith", function()
    assert.truthy(string.endswith('test', 'st'))
    assert.truthy(string.endswith(" ", " "))
    assert.truthy(string.endswith("", ""))
  end)
  it("endswith", function()
    assert.truthy(not string.endswith('test', 'fake'))
    assert.truthy(not string.endswith('test', 'o'))
  end)
  it("trim", function()
    assert.truthy(string.trim('') == '')
    assert.truthy(string.trim(' ') == '')
    assert.truthy(string.trim('  s') == 's')
    assert.truthy(string.trim('s') == 's')
    assert.truthy(string.trim('s ') == 's')
    assert.truthy(string.trim('s  ') == 's')
    assert.truthy(string.trim(' a some sort   ') == 'a some sort')
  end)
  it("nostrip", function()
    assert.equal("", string.nostrip("www", "www"))
    assert.truthy(string.nostrip("https://www.google.com/some/url", 'https://', 'http://', 'www.') == 'google.com/some/url')
    assert.truthy(string.nostrip("http://www.google.com/some/url", 'https://', 'http://', 'www.') == 'google.com/some/url')
    assert.truthy(string.nostrip("https://www.google.com/some/url", 'https://', 'http://', 'www.', 'google.com') == '/some/url')
    assert.truthy(string.nostrip("http://www.google.com/some/url", 'https://', 'http://', 'www.', 'google') == '.com/some/url')
  end)
  it("rstrip", function()
    assert.equal("", string.rstrip("www", "www"))
    assert.equal("w", string.rstrip("www", "ww"))
    assert.equal("", string.rstrip("w", "w"))
    assert.equal("", string.rstrip(".", "."))
    assert.equal("some/path", string.rstrip("some/path/", "/"))
    assert.equal("/some/path", string.rstrip("/some/path/", "/"))
  end)
  it("unescape_html", function() assert.truthy(string.unescape_html("&lt;$5 Million") == '<$5 Million') end)
  it("split", function()
    assert.same({"1,2"}, ("1,2"):split())
    assert.same({"1", ",", "2", " ", "3"}, ("1,2 3"):split(""))
    assert.same({"1", "2"}, string.split("1,2", ","))
    assert.same({"1", "2"}, ("1,2"):split(","))
    assert.same({"1", "2 3"}, ("1,2 3"):split(","))
    assert.same({"1", "2", "3"}, ("1, 2, 3"):split(", "))
    assert.same({"1", "2", "3"}, ("1,,2,,3"):split(",,"))
    assert.same({"1", "2", "3"}, ("1a very WIERD mansion!@#$%^&*()2a very WIERD mansion!@#$%^&*()3"):split("a very WIERD mansion!@#$%^&*()"))
  end)
  it("match", function()
    assert.truthy(string.match("\n\n\n<html>", "^[%s\n]*%<%s*html"))
    assert.truthy(string.match("\n\n\n\n<!DOCTYPE html>", "^[%s\n]*%<%!DOCTYPE"))
    --    assert.are.same({"suka", "bly", "naya"}, string.match("suka blya ebanaya", "^suka", "b%wy", "n%w%wa$"))
  end)
  it("prefix", function()
    assert.equal("", string.prefix(''))
    assert.equal("", string.prefix('', nil))
    assert.equal("", string.prefix('', ""))
    assert.equal("x", string.prefix('', "x"))
    assert.equal("x", string.prefix('x', ""))
    assert.equal("google.com", string.prefix("google.com"))
    assert.equal("www.google.com", string.prefix("google.com", "www."))
  end)
  it("sub", function() assert.equal('', (''):sub(2)) end)
if debug and debug.getmetatable and getmetatable("")~=nil then
  it("__mod", function() assert.equal('7', '%s' % 7) end)
  it("mt", function()
    assert.is_nil(getmetatable(string))
    assert.is_not_nil(getmetatable(""))
  end)
end
end)
